/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Incident : IEquatable<Incident>
    { 
        /// <summary>
        /// Incident Id
        /// </summary>
        /// <value>Incident Id</value>
        [DataMember(Name="incidentid")]
        public int? Incidentid { get; set; }

        /// <summary>
        /// incident description
        /// </summary>
        /// <value>incident description</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// incident type
        /// </summary>
        /// <value>incident type</value>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Position Point or Polygon
        /// </summary>
        /// <value>Position Point or Polygon</value>
        [DataMember(Name="position")]
        public string Position { get; set; }

        /// <summary>
        /// priority 1-100
        /// </summary>
        /// <value>priority 1-100</value>
        [DataMember(Name="prio")]
        public int? Prio { get; set; }

        /// <summary>
        /// Status of incident
        /// </summary>
        /// <value>Status of incident</value>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Probability
        /// </summary>
        /// <value>Probability</value>
        [DataMember(Name="probability")]
        public decimal? Probability { get; set; }

        /// <summary>
        /// Json with intervention plan
        /// </summary>
        /// <value>Json with intervention plan</value>
        [DataMember(Name="interventionplan")]
        public string Interventionplan { get; set; }

        /// <summary>
        /// time of wearable connection (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))
        /// </summary>
        /// <value>time of wearable connection (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))</value>
        [DataMember(Name="Incidenttime")]
        public DateTime? Incidenttime { get; set; }

        /// <summary>
        /// wristband
        /// </summary>
        /// <value>wristband</value>
        [DataMember(Name="wbid")]
        public string Wbid { get; set; }

        /// <summary>
        /// phoneno
        /// </summary>
        /// <value>phoneno</value>
        [DataMember(Name="telephone")]
        public string Telephone { get; set; }

        /// <summary>
        /// ID of additional media e.g picture, video sound
        /// </summary>
        /// <value>ID of additional media e.g picture, video sound</value>
        [DataMember(Name="additionalMedia")]
        public string AdditionalMedia { get; set; }

        /// <summary>
        /// additionalMediaType
        /// </summary>
        /// <value>additionalMediaType</value>
        [DataMember(Name="mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Incident {\n");
            sb.Append("  Incidentid: ").Append(Incidentid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Prio: ").Append(Prio).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("  Interventionplan: ").Append(Interventionplan).Append("\n");
            sb.Append("  Incidenttime: ").Append(Incidenttime).Append("\n");
            sb.Append("  Wbid: ").Append(Wbid).Append("\n");
            sb.Append("  Telephone: ").Append(Telephone).Append("\n");
            sb.Append("  AdditionalMedia: ").Append(AdditionalMedia).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Incident)obj);
        }

        /// <summary>
        /// Returns true if Incident instances are equal
        /// </summary>
        /// <param name="other">Instance of Incident to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Incident other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Incidentid == other.Incidentid ||
                    Incidentid != null &&
                    Incidentid.Equals(other.Incidentid)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.Equals(other.Position)
                ) && 
                (
                    Prio == other.Prio ||
                    Prio != null &&
                    Prio.Equals(other.Prio)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Probability == other.Probability ||
                    Probability != null &&
                    Probability.Equals(other.Probability)
                ) && 
                (
                    Interventionplan == other.Interventionplan ||
                    Interventionplan != null &&
                    Interventionplan.Equals(other.Interventionplan)
                ) && 
                (
                    Incidenttime == other.Incidenttime ||
                    Incidenttime != null &&
                    Incidenttime.Equals(other.Incidenttime)
                ) && 
                (
                    Wbid == other.Wbid ||
                    Wbid != null &&
                    Wbid.Equals(other.Wbid)
                ) && 
                (
                    Telephone == other.Telephone ||
                    Telephone != null &&
                    Telephone.Equals(other.Telephone)
                ) && 
                (
                    AdditionalMedia == other.AdditionalMedia ||
                    AdditionalMedia != null &&
                    AdditionalMedia.Equals(other.AdditionalMedia)
                ) && 
                (
                    MediaType == other.MediaType ||
                    MediaType != null &&
                    MediaType.Equals(other.MediaType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Incidentid != null)
                    hashCode = hashCode * 59 + Incidentid.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (Prio != null)
                    hashCode = hashCode * 59 + Prio.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Probability != null)
                    hashCode = hashCode * 59 + Probability.GetHashCode();
                    if (Interventionplan != null)
                    hashCode = hashCode * 59 + Interventionplan.GetHashCode();
                    if (Incidenttime != null)
                    hashCode = hashCode * 59 + Incidenttime.GetHashCode();
                    if (Wbid != null)
                    hashCode = hashCode * 59 + Wbid.GetHashCode();
                    if (Telephone != null)
                    hashCode = hashCode * 59 + Telephone.GetHashCode();
                    if (AdditionalMedia != null)
                    hashCode = hashCode * 59 + AdditionalMedia.GetHashCode();
                    if (MediaType != null)
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Incident left, Incident right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Incident left, Incident right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
