/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Thing : IEquatable<Thing>
    { 
        /// <summary>
        /// Thing id
        /// </summary>
        /// <value>Thing id</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Thing name
        /// </summary>
        /// <value>Thing name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Thing description
        /// </summary>
        /// <value>Thing description</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Thing type
        /// </summary>
        /// <value>Thing type</value>
        [DataMember(Name="thingtype")]
        public int? Thingtype { get; set; }

        /// <summary>
        /// Thing template
        /// </summary>
        /// <value>Thing template</value>
        [DataMember(Name="thingTemplate")]
        public string ThingTemplate { get; set; }

        /// <summary>
        /// Thing status
        /// </summary>
        /// <value>Thing status</value>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Thing latitude
        /// </summary>
        /// <value>Thing latitude</value>
        [DataMember(Name="lat")]
        public decimal? Lat { get; set; }

        /// <summary>
        /// Thing latitude
        /// </summary>
        /// <value>Thing latitude</value>
        [DataMember(Name="lon")]
        public decimal? Lon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Thing {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Thingtype: ").Append(Thingtype).Append("\n");
            sb.Append("  ThingTemplate: ").Append(ThingTemplate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Thing)obj);
        }

        /// <summary>
        /// Returns true if Thing instances are equal
        /// </summary>
        /// <param name="other">Instance of Thing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Thing other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Thingtype == other.Thingtype ||
                    Thingtype != null &&
                    Thingtype.Equals(other.Thingtype)
                ) && 
                (
                    ThingTemplate == other.ThingTemplate ||
                    ThingTemplate != null &&
                    ThingTemplate.Equals(other.ThingTemplate)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Lat == other.Lat ||
                    Lat != null &&
                    Lat.Equals(other.Lat)
                ) && 
                (
                    Lon == other.Lon ||
                    Lon != null &&
                    Lon.Equals(other.Lon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Thingtype != null)
                    hashCode = hashCode * 59 + Thingtype.GetHashCode();
                    if (ThingTemplate != null)
                    hashCode = hashCode * 59 + ThingTemplate.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Lat != null)
                    hashCode = hashCode * 59 + Lat.GetHashCode();
                    if (Lon != null)
                    hashCode = hashCode * 59 + Lon.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Thing left, Thing right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Thing left, Thing right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
