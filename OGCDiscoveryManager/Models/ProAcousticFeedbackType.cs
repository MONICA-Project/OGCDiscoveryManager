/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProAcousticFeedbackType : IEquatable<ProAcousticFeedbackType>
    { 
        /// <summary>
        /// Type ID
        /// </summary>
        /// <value>Type ID</value>
        [DataMember(Name="typeid")]
        public int? Typeid { get; set; }

        /// <summary>
        /// Feedback type name
        /// </summary>
        /// <value>Feedback type name</value>
        [DataMember(Name="feedbackTypeName")]
        public string FeedbackTypeName { get; set; }

        /// <summary>
        /// Feedback type description
        /// </summary>
        /// <value>Feedback type description</value>
        [DataMember(Name="feedbackTypeDescription")]
        public string FeedbackTypeDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProAcousticFeedbackType {\n");
            sb.Append("  Typeid: ").Append(Typeid).Append("\n");
            sb.Append("  FeedbackTypeName: ").Append(FeedbackTypeName).Append("\n");
            sb.Append("  FeedbackTypeDescription: ").Append(FeedbackTypeDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProAcousticFeedbackType)obj);
        }

        /// <summary>
        /// Returns true if ProAcousticFeedbackType instances are equal
        /// </summary>
        /// <param name="other">Instance of ProAcousticFeedbackType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProAcousticFeedbackType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Typeid == other.Typeid ||
                    Typeid != null &&
                    Typeid.Equals(other.Typeid)
                ) && 
                (
                    FeedbackTypeName == other.FeedbackTypeName ||
                    FeedbackTypeName != null &&
                    FeedbackTypeName.Equals(other.FeedbackTypeName)
                ) && 
                (
                    FeedbackTypeDescription == other.FeedbackTypeDescription ||
                    FeedbackTypeDescription != null &&
                    FeedbackTypeDescription.Equals(other.FeedbackTypeDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Typeid != null)
                    hashCode = hashCode * 59 + Typeid.GetHashCode();
                    if (FeedbackTypeName != null)
                    hashCode = hashCode * 59 + FeedbackTypeName.GetHashCode();
                    if (FeedbackTypeDescription != null)
                    hashCode = hashCode * 59 + FeedbackTypeDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProAcousticFeedbackType left, ProAcousticFeedbackType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProAcousticFeedbackType left, ProAcousticFeedbackType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
