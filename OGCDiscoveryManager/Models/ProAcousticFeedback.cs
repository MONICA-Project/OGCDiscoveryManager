/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProAcousticFeedback : IEquatable<ProAcousticFeedback>
    { 
        /// <summary>
        /// Phone id
        /// </summary>
        /// <value>Phone id</value>
        [DataMember(Name="phoneid")]
        public string Phoneid { get; set; }

        /// <summary>
        /// Feedback matching feedback type list
        /// </summary>
        /// <value>Feedback matching feedback type list</value>
        [DataMember(Name="feedbackType")]
        public string FeedbackType { get; set; }

        /// <summary>
        /// Feedback value
        /// </summary>
        /// <value>Feedback value</value>
        [DataMember(Name="feedback_value")]
        public decimal? FeedbackValue { get; set; }

        /// <summary>
        /// Feedback message
        /// </summary>
        /// <value>Feedback message</value>
        [DataMember(Name="feedback_message")]
        public string FeedbackMessage { get; set; }

        /// <summary>
        /// Feedback position latitude
        /// </summary>
        /// <value>Feedback position latitude</value>
        [DataMember(Name="feedback_lat")]
        public decimal? FeedbackLat { get; set; }

        /// <summary>
        /// Feedback position longitude
        /// </summary>
        /// <value>Feedback position longitude</value>
        [DataMember(Name="feedback_lon")]
        public decimal? FeedbackLon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProAcousticFeedback {\n");
            sb.Append("  Phoneid: ").Append(Phoneid).Append("\n");
            sb.Append("  FeedbackType: ").Append(FeedbackType).Append("\n");
            sb.Append("  FeedbackValue: ").Append(FeedbackValue).Append("\n");
            sb.Append("  FeedbackMessage: ").Append(FeedbackMessage).Append("\n");
            sb.Append("  FeedbackLat: ").Append(FeedbackLat).Append("\n");
            sb.Append("  FeedbackLon: ").Append(FeedbackLon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProAcousticFeedback)obj);
        }

        /// <summary>
        /// Returns true if ProAcousticFeedback instances are equal
        /// </summary>
        /// <param name="other">Instance of ProAcousticFeedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProAcousticFeedback other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Phoneid == other.Phoneid ||
                    Phoneid != null &&
                    Phoneid.Equals(other.Phoneid)
                ) && 
                (
                    FeedbackType == other.FeedbackType ||
                    FeedbackType != null &&
                    FeedbackType.Equals(other.FeedbackType)
                ) && 
                (
                    FeedbackValue == other.FeedbackValue ||
                    FeedbackValue != null &&
                    FeedbackValue.Equals(other.FeedbackValue)
                ) && 
                (
                    FeedbackMessage == other.FeedbackMessage ||
                    FeedbackMessage != null &&
                    FeedbackMessage.Equals(other.FeedbackMessage)
                ) && 
                (
                    FeedbackLat == other.FeedbackLat ||
                    FeedbackLat != null &&
                    FeedbackLat.Equals(other.FeedbackLat)
                ) && 
                (
                    FeedbackLon == other.FeedbackLon ||
                    FeedbackLon != null &&
                    FeedbackLon.Equals(other.FeedbackLon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Phoneid != null)
                    hashCode = hashCode * 59 + Phoneid.GetHashCode();
                    if (FeedbackType != null)
                    hashCode = hashCode * 59 + FeedbackType.GetHashCode();
                    if (FeedbackValue != null)
                    hashCode = hashCode * 59 + FeedbackValue.GetHashCode();
                    if (FeedbackMessage != null)
                    hashCode = hashCode * 59 + FeedbackMessage.GetHashCode();
                    if (FeedbackLat != null)
                    hashCode = hashCode * 59 + FeedbackLat.GetHashCode();
                    if (FeedbackLon != null)
                    hashCode = hashCode * 59 + FeedbackLon.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProAcousticFeedback left, ProAcousticFeedback right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProAcousticFeedback left, ProAcousticFeedback right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
