/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Observation : IEquatable<Observation>
    {
        /// <summary>
        /// Thing id
        /// </summary>
        /// <value>Thing id</value>
        [DataMember(Name = "thingId")]
        public int? ThingId { get; set; }

        /// <summary>
        /// Datastream id
        /// </summary>
        /// <value>Datastream id</value>
        [DataMember(Name = "datastreamId")]
        public string DatastreamId { get; set; }

        /// <summary>
        /// Type of obs
        /// </summary>
        /// <value>Type of obs</value>
        [DataMember(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// optional person connected
        /// </summary>
        /// <value>optional person connected</value>
        [DataMember(Name = "personid")]
        public int? Personid { get; set; }

        /// <summary>
        /// Optional zone id
        /// </summary>
        /// <value>Optional zone id</value>
        [DataMember(Name = "zoneid")]
        public int? Zoneid { get; set; }

        /// <summary>
        /// phenomen time
        /// </summary>
        /// <value>phenomen time</value>
        [DataMember(Name = "phenomenTime")]
        public DateTime? PhenomenTime { get; set; }

        /// <summary>
        /// The latest observation
        /// </summary>
        /// <value>The latest observation</value>
        [DataMember(Name = "observationResult")]
        public string ObservationResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Observation {\n");
            sb.Append("  ThingId: ").Append(ThingId).Append("\n");
            sb.Append("  DatastreamId: ").Append(DatastreamId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Personid: ").Append(Personid).Append("\n");
            sb.Append("  Zoneid: ").Append(Zoneid).Append("\n");
            sb.Append("  PhenomenTime: ").Append(PhenomenTime).Append("\n");
            sb.Append("  ObservationResult: ").Append(ObservationResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Observation)obj);
        }

        /// <summary>
        /// Returns true if Observation instances are equal
        /// </summary>
        /// <param name="other">Instance of Observation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Observation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ThingId == other.ThingId ||
                    ThingId != null &&
                    ThingId.Equals(other.ThingId)
                ) &&
                (
                    DatastreamId == other.DatastreamId ||
                    DatastreamId != null &&
                    DatastreamId.Equals(other.DatastreamId)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Personid == other.Personid ||
                    Personid != null &&
                    Personid.Equals(other.Personid)
                ) &&
                (
                    Zoneid == other.Zoneid ||
                    Zoneid != null &&
                    Zoneid.Equals(other.Zoneid)
                ) &&
                (
                    PhenomenTime == other.PhenomenTime ||
                    PhenomenTime != null &&
                    PhenomenTime.Equals(other.PhenomenTime)
                ) &&
                (
                    ObservationResult == other.ObservationResult ||
                    ObservationResult != null &&
                    ObservationResult.Equals(other.ObservationResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ThingId != null)
                    hashCode = hashCode * 59 + ThingId.GetHashCode();
                if (DatastreamId != null)
                    hashCode = hashCode * 59 + DatastreamId.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Personid != null)
                    hashCode = hashCode * 59 + Personid.GetHashCode();
                if (Zoneid != null)
                    hashCode = hashCode * 59 + Zoneid.GetHashCode();
                if (PhenomenTime != null)
                    hashCode = hashCode * 59 + PhenomenTime.GetHashCode();
                if (ObservationResult != null)
                    hashCode = hashCode * 59 + ObservationResult.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Observation left, Observation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Observation left, Observation right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
