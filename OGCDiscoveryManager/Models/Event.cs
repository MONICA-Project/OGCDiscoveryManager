/*
 * MONICA COP API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.9.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Event : IEquatable<Event>
    { 
        /// <summary>
        /// Event Name
        /// </summary>
        /// <value>Event Name</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of city
        /// </summary>
        /// <value>Name of city</value>
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// lat of map
        /// </summary>
        /// <value>lat of map</value>
        [DataMember(Name="lat")]
        public decimal? Lat { get; set; }

        /// <summary>
        /// lon of map
        /// </summary>
        /// <value>lon of map</value>
        [DataMember(Name="lon")]
        public decimal? Lon { get; set; }

        /// <summary>
        /// Zoom level map
        /// </summary>
        /// <value>Zoom level map</value>
        [DataMember(Name="zoom")]
        public int? Zoom { get; set; }

        /// <summary>
        /// Start ofevent (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))
        /// </summary>
        /// <value>Start ofevent (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))</value>
        [DataMember(Name="start")]
        public DateTime? Start { get; set; }

        /// <summary>
        /// End of event (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))
        /// </summary>
        /// <value>End of event (e.g. &#39;2016-06-17T15:28:34Z&#39; (RFC 3339, ISO 8601))</value>
        [DataMember(Name="end")]
        public DateTime? End { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  Zoom: ").Append(Zoom).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Event)obj);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="other">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Lat == other.Lat ||
                    Lat != null &&
                    Lat.Equals(other.Lat)
                ) && 
                (
                    Lon == other.Lon ||
                    Lon != null &&
                    Lon.Equals(other.Lon)
                ) && 
                (
                    Zoom == other.Zoom ||
                    Zoom != null &&
                    Zoom.Equals(other.Zoom)
                ) && 
                (
                    Start == other.Start ||
                    Start != null &&
                    Start.Equals(other.Start)
                ) && 
                (
                    End == other.End ||
                    End != null &&
                    End.Equals(other.End)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Lat != null)
                    hashCode = hashCode * 59 + Lat.GetHashCode();
                    if (Lon != null)
                    hashCode = hashCode * 59 + Lon.GetHashCode();
                    if (Zoom != null)
                    hashCode = hashCode * 59 + Zoom.GetHashCode();
                    if (Start != null)
                    hashCode = hashCode * 59 + Start.GetHashCode();
                    if (End != null)
                    hashCode = hashCode * 59 + End.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Event left, Event right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Event left, Event right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
